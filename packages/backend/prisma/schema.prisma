generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  VIP
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PredictionStatus {
  UPCOMING
  WON
  LOST
  VOID
  EXPIRED
}

enum PaymentMethod {
  stripe
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  role        Role     @default(USER)
  referralCode String  @unique @default(uuid())
  referredBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscription Subscription?
  referrals    Referral[] @relation("Referrer")
  referred     Referral[] @relation("Referred")
  predictions  Prediction[]
  payments     Payment[]
  commissionsEarned CommissionLog[] @relation("CommissionReferrer")
  commissionsFrom   CommissionLog[] @relation("CommissionReferred")

  @@map("users")
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique
  plan       SubscriptionPlan
  status     SubscriptionStatus @default(PENDING)
  stripeId   String?            @unique
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Referral {
  id              String  @id @default(uuid())
  referrerId      String
  referredUserId  String
  commissionRate  Float
  earnedAmount    Float   @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredUserId], references: [id])

  @@unique([referrerId, referredUserId])
  @@map("referrals")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  predictions Prediction[]

  @@map("categories")
}

model Prediction {
  id          String           @id @default(uuid())
  categoryId  String
  title       String
  league      String?
  homeTeam    String?
  awayTeam    String?
  pick        String
  odds        Decimal
  scheduledAt DateTime
  status      PredictionStatus @default(UPCOMING)
  resultNote  String?
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id])
  creator  User     @relation(fields: [createdBy], references: [id])

  @@map("predictions")
}

model Payment {
  id          String        @id @default(uuid())
  userId      String
  amount      Decimal
  currency    String        @default("usd")
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  stripeId    String?       @unique
  periodStart DateTime?
  periodEnd   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User            @relation(fields: [userId], references: [id])
  commissions CommissionLog[]

  @@map("payments")
}

model CommissionLog {
  id             String   @id @default(uuid())
  referrerId     String
  referredUserId String
  fromPaymentId  String
  amount         Decimal
  rateApplied    Decimal
  month          String
  createdAt      DateTime @default(now())

  // Relations
  referrer    User    @relation("CommissionReferrer", fields: [referrerId], references: [id])
  referred    User    @relation("CommissionReferred", fields: [referredUserId], references: [id])
  fromPayment Payment @relation(fields: [fromPaymentId], references: [id])

  @@map("commission_logs")
}