generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  VIP
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  REQUESTED
  APPROVED
  REJECTED
  PROCESSING
  PAID
  FAILED
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  role          Role     @default(USER)
  referralCode  String   @unique @default(uuid())
  referredBy    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
    userAgreements  UserAgreement[]

  // Personal data
  firstName     String?
  lastName      String?
  birthDate     DateTime?
  age           Int?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  postalCode    String?
  country       String?

  // Stripe Connect
  stripeAccountId          String?  @unique
  stripeOnboardingComplete Boolean  @default(false)
  stripePayoutsEnabled     Boolean  @default(false)
  stripeChargesEnabled     Boolean  @default(false)
  stripeRequirementsDue    Json?

    // NEW: user settings/preferences
  preferences   Json?


  // Relations
  subscription  Subscription?
  referrals     Referral[]    @relation("Referrer")
  referred      Referral[]    @relation("Referred")
  predictions   Prediction[]
  payments      Payment[]
  payoutRequests PayoutRequest[]

  @@map("users")
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique
  plan       SubscriptionPlan
  status     SubscriptionStatus @default(PENDING)
  stripeId   String?            @unique
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Referral {
  id              String  @id @default(uuid())
  referrerId      String
  referredUserId  String
  commissionRate  Float
  earnedAmount    Float   @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredUserId], references: [id])

  @@unique([referrerId, referredUserId])
  @@map("referrals")
}

enum PredictionStatus {
  SCHEDULED
  LIVE
  FINISHED
  POSTPONED
  CANCELED
}

enum PredictionResult {
  PENDING
  WIN
  LOSS
  VOID
  PUSH
}


model Prediction {
  id          String   @id @default(uuid())
  sport       String
  title       String
  description String
  odds        Float
  matchDate   DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // NEW
  status     PredictionStatus @default(SCHEDULED)
  result     PredictionResult @default(PENDING)
  settledAt  DateTime?

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("predictions")
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  amount    Float
  currency  String        @default("usd")
  method    String
  date      DateTime      @default(now())
  status    PaymentStatus @default(PENDING)
  stripeId  String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model PayoutRequest {
  id               String       @id @default(uuid())
  userId           String
  amount           Float
  currency         String       @default("usd")
  status           PayoutStatus @default(REQUESTED)
  reason           String?
  adminNote        String?
  stripeTransferId String?      @unique
  stripePayoutId   String?      @unique
  processedAt      DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("payout_requests")
}

enum LegalDocumentType {
  TERMS
  PRIVACY
  AGE
  REFERRAL
  COOKIES
  REFUND
}

model LegalDocument {
  id          String            @id @default(uuid())
  type        LegalDocumentType
  version     String
  title       String
  contentUrl  String?           // URL към HTML/PDF или slug
  effectiveAt DateTime
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  userAgreements UserAgreement[]

  @@unique([type, version])
  @@map("legal_documents")
}

model UserAgreement {
  id           String   @id @default(uuid())
  userId       String
  documentId   String
  agreedAt     DateTime @default(now())
  ip           String?
  userAgent    String?

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  document LegalDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId])
  @@map("user_agreements")
}