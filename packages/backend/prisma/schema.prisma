generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  VIP
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  role        Role     @default(USER)
  referralCode String  @unique @default(uuid())
  referredBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscription Subscription?
  referrals    Referral[] @relation("Referrer")
  referred     Referral[] @relation("Referred")
  predictions  Prediction[]
  payments     Payment[]

  @@map("users")
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique
  plan       SubscriptionPlan
  status     SubscriptionStatus @default(PENDING)
  stripeId   String?            @unique
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Referral {
  id              String  @id @default(uuid())
  referrerId      String
  referredUserId  String
  commissionRate  Float
  earnedAmount    Float   @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referred User @relation("Referred", fields: [referredUserId], references: [id])

  @@unique([referrerId, referredUserId])
  @@map("referrals")
}

model Prediction {
  id          String   @id @default(uuid())
  sport       String
  title       String
  description String
  odds        Float
  matchDate   DateTime
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("predictions")
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  amount    Float
  currency  String        @default("usd")
  method    String
  date      DateTime      @default(now())
  status    PaymentStatus @default(PENDING)
  stripeId  String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}